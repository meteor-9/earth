"""
Django settings for earth project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
import logging
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'pt29qecv54tu$+&fbiy8p5k8#_8jhf&qzr#j$n08wyxr1o$mil'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'simpleui',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',#允许跨域的app，需要安装django-cors-headers
    'example.apps.ExampleConfig', #例子的app

]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',#允许跨域的中间件，需要安装
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'earth.middlerwares.SessionMiddleware',  # 校验token的中间件
    'earth.middlerwares.PutMethodMiddleware',  # 添加request.PUT属性
    'earth.middlerwares.ExceptionMiddleware',  # 处理异常的中间件
]

CORS_ORIGIN_ALLOW_ALL = True #加上这个允许所有跨域
CORS_ALLOW_HEADERS = '*'  #加上这个允许所有跨域
CORS_ALLOW_CREDENTIALS = True #加上这个允许所有跨域


ROOT_URLCONF = 'earth.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'earth.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
    # 'default': {
    #     'ENGINE': 'django.db.backends.mysql',  # 数据库引擎改为mysql
    #     'NAME': 'db',  # 数据库名称
    #     'USER': 'user',  # 用户
    #     'PASSWORD': '123456',  # 密码
    #     'HOST': 'ip',  # ip
    #     'PORT': 3306,  # 端口号
    # }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'  # 语言

TIME_ZONE = 'Asia/Shanghai'  # 时区

USE_I18N = True

USE_L10N = True

USE_TZ = False  # 如果不改这里的话，存到数据的里面时间是标准时区的

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {"max_connections": 100},
            "PASSWORD": "123456",  # 密码
        }
    },
    "redis2": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {"max_connections": 100, 'decode_responses': True},
            "PASSWORD": "123456",  # 密码
        }
    }
}  # redis配置

NO_LOGIN_LIST = ['login','example','admin']  # 哪些url不需要登录,在中间件里面使用的



EMAIL_INFO = {
    "user":'user@163.com', #邮箱账号
    'password':'password',   #密码
    'port':None,  #端口
    'host':'smtp.163.com'
}

EMAIL_TO = ['511402865@qq.com','616745045@qq.com'] #收件人
EMAIL_CC = ['511402865@qq.com','616745045@qq.com'] #抄送
LOGS_DIR = os.path.join(BASE_DIR, 'logs') #log目录

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {  # 定义输出日志的格式
        'standard': {  # 格式名字可以随意定义
            'format': '[%(asctime)s] [%(levelname)s] [%(filename)s:%(funcName)s:%(lineno)d] %(message)s'
            # 定义信息格式，自己随便定义，都有什么内容查看下边内容
        },
        'simple': {
            'format': '[%(levelname)s]> %(message)s'
        },
    },
    'handlers': {  # 控制器，控制是什么样的记录方式等的一些参数
        'info': {
            'level': 'INFO',  # 日志级别
            'class': 'logging.handlers.RotatingFileHandler',  # 定义日志的切分格式，以及输出方式
            'filename': os.path.join(LOGS_DIR, 'server_info.log'),  # 日志文件，请确保修改'filename'路径为运行Django应用的用户有权限写入的一个位置
            'maxBytes': 1024 * 1024 * 5,  # 5 MB 文件大小
            'backupCount': 5,  # 备份份数
            'formatter': 'standard',  # 使用哪种日志格式
        },
        'debug': {
            'level': 'DEBUG',  # 日志级别
            'class': 'logging.handlers.RotatingFileHandler',  # 定义日志的切分格式，以及输出方式
            'filename': os.path.join(LOGS_DIR, 'server_debug.log'),  # 日志文件，请确保修改'filename'路径为运行Django应用的用户有权限写入的一个位置
            'maxBytes': 1024 * 1024 * 5,  # 5 MB 文件大小
            'backupCount': 5,  # 备份份数
            'formatter': 'standard',  # 使用哪种日志格式
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',  # 输出到控制台，这个类指定的不同输出方式不一样，下边是这个地方指定的类所需要的参数
            'formatter': 'standard'
        },
    },
    'loggers': {
        'django_server': {
            'handlers': ['info', 'console', 'debug'],  # 上线后如不需要查看debug日志 则直接从列表中删除debug参数即可
            'level': 'DEBUG',
            'propagate': True,
        },
    }
}
# 引入了logger 可以直接在view中导入这个logger 通过logger.debug() logger.info() 的方式记录日志
logger = logging.getLogger("django_server")

MEDIA_ROOT = os.path.join(BASE_DIR, "upload") #上传文件的路径
